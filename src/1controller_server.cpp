/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "controller.h"
#include <communication.h>
#include <locomotion.h>
#include <log4cpp/Category.hh>
#include <log4cpp/PropertyConfigurator.hh>

locomotion loc;
communication com;
log4cpp::Category *root, *sub1; // LOG

void log(){
    string initFileName = "log4cpp.properties";
    log4cpp::PropertyConfigurator::configure(initFileName);

    root = &log4cpp::Category::getRoot();
    sub1 = &log4cpp::Category::getInstance(std::string("sub1"));
}

int *
initcontroller_1_svc(void *argp, struct svc_req *rqstp)
{
	static int  result=0;
	log();
	sub1->debug("RPC: Starting Server.");
	result = com.get_fd();

	return &result;
}

int *
movecontroller_1_svc(POSITION *argp, struct svc_req *rqstp)
{
	static int  result;
	static POSITION  pos;
	static SERVOS serv;

	sub1->debug("RPC: Move.");

	pos = *argp;
	result = loc.Move(pos, serv);
	if(result == 0){
		com.sendArduino(loc);
	}
	return &result;
}

int *
movetocontroller_1_svc(POSITION *argp, struct svc_req *rqstp)
{
	static int  result;
	static POSITION  pos;
	static SERVOS serv;
	double p[3];
	int i;

	sub1->debug("RPC: MoveTo.");

	pos = *argp;

	for (i = 0; i<3; i++){
		p[i] = pos.p[i];
	}

	result = loc.MoveTo(p, serv);
	if(result == 0){
		com.sendArduino(loc);
	}
	return &result;
}

int *
rotatecontroller_1_svc(ANGLEROTATE *argp, struct svc_req *rqstp)
{
	static int  result;
	static POSITION  pos;
	static SERVOS serv;
	static ANGLEROTATE ang;

	sub1->debug("RPC: Rotate.");

	ang = *argp;
	result = loc.Rotate(ang, serv);
	if(result == 0){
		com.sendArduino(loc);
	}

	return &result;
}

POSITION *
getposcontroller_1_svc(void *argp, struct svc_req *rqstp)
{
	static POSITION  result;
	SERVOS servos;

	sub1->debug("RPC: GetPos.");

	//com.sendArduino(servos);
	//loc.SetServos(servos);
	loc.GetPosition(result);

	return &result;
}

SERVOS *
getservoscontroller_1_svc(void *argp, struct svc_req *rqstp)
{
	static SERVOS  result;
	SERVOS servos;

	sub1->debug("RPC: GetServos.");

	//com.sendArduino(servos);
	//loc.SetServos(servos);
	loc.GetServos(result);

	return &result;
}

int *
checkerror_1_svc(void *argp, struct svc_req *rqstp)
{
	static int  result;

	result = loc.checkError();

	return &result;
}
